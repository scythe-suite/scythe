set -e

echo1 "Preparing configuration"

tempdir=$(mktemp -d /tmp/scythe-XXXXXXXXXXXX) || exit 1

echo2 "Preparing TM tar directoroy"

echo3 "Adding exercises, making expected outputs"

mkdir "$tempdir/bundle" "$tempdir/src"
n=1
for e in $(tail -n +2 "$EXERCISES"); do
	echo3 "$e"

	dst=$(printf '%s/bundle/%02d-%s' "$tempdir" $n "$e")
	src=$(printf '%s/src/%02d-%s' "$tempdir" $n "$e")
	mkdir "$dst" "$src"

	# copy texts (possibly converted) to $dst

	if ls "$EXERCISES_DIR/$e/"*.md >/dev/null 2>&1; then
		convert_mds "$EXERCISES_DIR/$e" "$dst"
		cp "$EXERCISES_DIR/$e/"*.md "$dst/"
	fi
	if ls "$EXERCISES_DIR/$e/"*.txt >/dev/null 2>&1; then
		cp "$EXERCISES_DIR/$e/"*.txt "$dst/"
	fi

	# copy testcases to $src

	if ls "$EXERCISES_DIR/$e/"args-*.txt >/dev/null 2>&1; then
		cp "$EXERCISES_DIR/$e/"args-*.txt "$src/"
	fi
	if ls "$EXERCISES_DIR/$e/"input-*.txt >/dev/null 2>&1; then
		cp "$EXERCISES_DIR/$e/"input-*.txt "$src/"
	fi
	if [ -d "$EXERCISES_DIR/$e/testcases/" ]; then
		cp "$EXERCISES_DIR/$e/testcases/"*.txt "$src/"
	fi

	# copy teacher solution sources to $src

	if ls "$EXERCISES_DIR/$e/"*.c >/dev/null 2>&1; then
		cp "$EXERCISES_DIR/$e/"*.c "$src/"
	fi
	if ls "$EXERCISES_DIR/$e/"*.sh >/dev/null 2>&1; then
		cp "$EXERCISES_DIR/$e/"*.sh "$src/"
	fi
	for f in "$EXERCISES_DIR/$e/"*.java; do
		# remove package delcaration
		sed '/package .*;/d' "$f" > "$src/$(basename $f)"
	done

	# copy test runners to $dst

	if [ -r "$EXERCISES_DIR/$e/TestRunner.java" ]; then
		# remove package delcaration
		sed '/package .*;/d' "$EXERCISES_DIR/$e/TestRunner.java" > "$dst/TestRunner.java"
	fi

	# generate expected files

	if ! sf generate -t 2 -f -c "$src" -s "$src" -e "$dst"; then
		echo2 "Warning: solution has not been compiled"
	fi

	n=$(( n + 1 ))
done

echo3 "Adding texts, markdowns and bins"

if ls "$BASE_BUNDLE/"*.md  >/dev/null 2>&1; then
	convert_mds "$BASE_BUNDLE" "$tempdir/bundle/"
fi
if ls "$BASE_BUNDLE/"*.txt  >/dev/null 2>&1; then
	cp "$BASE_BUNDLE/"*.txt "$tempdir/bundle/"
fi
if [ -d "$BASE_BUNDLE/bin" ]; then
	cp -r "$BASE_BUNDLE/bin" "$tempdir/bundle/bin"
fi

echo3 "Fixing perms"

chmod -R u+rX-w,go= "$tempdir/bundle"
if [ -d "$tempdir/bundle/bin" ]; then
	chmod -R u+rx "$tempdir/bundle/bin"
fi
find "$tempdir/bundle" -name \*-\* -type d -exec chmod u+w {} \;

echo2 "Generating the TM configuration file (base + tar + uids)"

secret=$(head -n 1 "$EXERCISES")
if [ -z "$secret" ]; then
	secret=$(python3 -c 'import uuid; print(uuid.uuid4())')
	echo3 "Generated new secret $secret"
else
	echo3 "Using secret $secret"
fi

(echo "SECRET_KEY = '$secret'"; cat "$CONFS_DIR/confs.py") > "$tempdir/conf.py"

echo3 "Adding test account with UID set to '000000'"

(echo -e '000000\tTEST ACCOUNT'; cat "$REGISTERED_UIDS") > "$tempdir/registered_uids.tsv"

echo3 "Creating student configuration"
filter='^(bin/.*|\w+\.html|\w+\.txt)|([0-9]+-.+/(\w+\.(html|txt)|TestRunner\.java|((input|expected|args)-[0-9]+)\.txt))$'
tm mkconf -vf "$filter" -b "$tempdir/conf.py" -r "$tempdir/registered_uids.tsv" "$tempdir/bundle" "$TM_SETTINGS" 2>&1 | sort

echo3 "Creating tester configuration"
filter='^[0-9]+-.+/(.+\.md|TestRunner\.java|((input|expected|args)-[0-9]+(t|))\.txt)$'
tm mkconf -vf "$filter" -b "$tempdir/conf.py" -r "$tempdir/registered_uids.tsv" "$tempdir/bundle" "$ST_SETTINGS" 2>&1 | sort

echo2 "Cleanup temp dir"

chmod -R u+rwx "$tempdir"; rm -rf "$tempdir"